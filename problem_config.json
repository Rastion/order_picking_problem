{
    "entry_point": "order_picking_problem:OrderPickingProblem",
    "default_params": {
      "instance_file": "instances/instance_5_3_15_Random_Central_0.txt"
    },
    "creator": "Rastion",
    "type": "problem",
    "problem_name": "Order picking problem",
    "description": "In the order picking problem, a warehouse has a set of orders (or products) to be picked, starting and ending at a depot (order 0). The distances between every pair of orders are provided in a distance matrix. The objective is to find a picking order (a permutation of orders) that minimizes the total travel distance, including the return trip to the depot.",
    "link_to_dataset": "https://github.com/Rastion/order_picking_problem/blob/main/instances/Instance_5_3_15_Random_Central_0.txt",
    "keywords": [
      "order picking",
      "production-scheduling",
      "warehouse"
    ],
    "data_format": {
      "instance_file": {
        "format": "A text file where the first line contains the number of orders to pick (excluding the depot). Then, the distance matrix is provided as a square matrix of size (nb_orders+1) x (nb_orders+1), where the depot is represented by index 0."
      }
    },
    "decision_variables": {
      "picking_order": {
        "type": "list of int",
        "description": "A permutation of integers from 0 to nb_orders-1 representing the picking order, with 0 corresponding to the depot."
      }
    },
    "objective": {
      "type": "minimization",
      "function": "Total Distance = Sum(distance(i, i+1)) + distance(last, first)",
      "description": "Minimize the total travel distance required to visit all orders and return to the depot. The total distance is the sum of the distances between successive orders in the picking order plus the distance from the last order back to the depot."
    },
    "solution_representation": "A list of integers representing the picking order (a permutation of order indices, with 0 as the depot).",
    "formulations": [
      ""
    ]
  }
  